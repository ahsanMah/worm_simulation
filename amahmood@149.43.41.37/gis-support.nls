globals[
   soil_dataset ;will be used for storing gis vector data
   road_dataset
    road_features
    road_vertexlist
    road_point
    last_point
   ph_map
 
  ]

patches-own[
 symbol ;helps identify feature type for gis support (W = Water etc.)
 road 

]

to setup_gis
  print "Loading GIS data..."
  set soil_dataset gis:load-dataset (word "simulations/" save_name "/input/soil/spatial/soilmu_a_aoi.shp")

  print "Setting up world..."
  gis:set-world-envelope-ds (gis:envelope-of soil_dataset)
  set road_dataset gis:load-dataset (word "simulations/" save_name "/input/roads/roadtrl010g.shp")
  gis:apply-coverage soil_dataset "MUSYM" symbol
  ;gis:apply-coverage road_dataset "STATE_CODE" road
  set road_features gis:feature-list-of road_dataset
  set road_vertexlist []
  foreach road_features
  [
    ;if i = 1
    ;[
   set road_vertexlist lput gis:vertex-lists-of ? road_vertexlist
   ;show road_vertexlist
    ;]
    ;set i i + 1
  ]
  load_ph
  print "Drawing map..." 
  ;draw_map
  print "Mapping GIS features to patches..."
  map_patches
  recolor_patches
  print "Finished setting up GIS"
  

  ;set fishing_spots [ [67.03 242.13] [118.73 214.20] [125.4 162.5] [112.48 289.6] [135.83 175.43] ]
  
  ;gis:set-drawing-color magenta
  ;gis:draw road_dataset 5
end

to load_ph
  set ph_map table:make
  let filename (word "simulations/" save_name "/input/soil/map_key.csv")
  let ph_list csv:from-file filename
  foreach ph_list [
    ;table:put ph_map (item 0 ?) (list (item 2 ?) (item 5 ?) (item 6 ?)) 
    table:put ph_map (item 0 ?)(list (item 2 ?)(item 3 ?)(item 4 ?))
    ]
end




to draw_map
  gis:set-drawing-color black
  gis:draw soil_dataset 0.1

;foreach gis:feature-list-of soil_dataset [
;  let map_symbol (gis:property-value ? "MUSYM")
;  
;  if (table:has-key? ph_map map_symbol)[
;    let gis_ph (table:get ph_map map_symbol)
;    ifelse (gis_ph != "")[
;      gis:set-drawing-color scale-color green gis_ph 14 0]
;    [gis:set-drawing-color grey]
;  ]
;  
;  if (map_symbol = "W") [
;    gis:set-drawing-color blue
;  ]
;  
;  gis:fill ? 1
;  
;]
end

to map_patches
  set last_point []
  ask patches[
    
    if (table:has-key? ph_map symbol)[
      let gis_ph (item 0 table:get ph_map symbol)
      let gis_depth (item 1 table:get ph_map symbol)
      let gis_moisture (item 2 table:get ph_map symbol)
      ifelse (gis_ph != "")[
        ;set pcolor scale-color green gis_ph 14 0
        set ph gis_ph
        set soil_depth gis_depth
        set moisture gis_moisture
      ]
      [ set pcolor grey
        set permeability 0
      ]
    ]
    
    if (symbol = "W")
    [
      set pcolor blue
      set permeability speed_in_water
      set food-here 0
    ]
    ;   if (road = 36)
    ;   [
    ;      set permeability road_speed
    ;      set pcolor magenta
    ;      set food-here default_food_value
    ;   ]
    
  ]
  ;show road_vertexlist
  foreach road_vertexlist
    [
      let vertex_lists ?
      foreach vertex_lists
      [
        let road_point_list ?
        foreach road_point_list [
          set road_point gis:location-of ?;map_helper ?
                                          ;show road_point
                                          ;show "count"
                                          ;show gis:type-of road_point
          if not empty? road_point
          [
            ask patch item 0 road_point item 1 road_point
            [
              set permeability road_speed
              set pcolor magenta
              set food-here default_food_value
            ]
            if not empty? last_point
            [
              let x1 item 0 road_point
              let y1 item 1 road_point
              let x2 item 0 last_point
              let y2 item 1 last_point
              let dist sqrt ((x2 - x1) ^ 2 + (y2 - y1) ^ 2)
              let dex (x2 - x1) / dist
              let dey (y2 - y1) / dist
              let x-at x1
              let y-at y1
              ;show (not empty? last_point) and (not empty? road_point)
              ;show x-at < x2 and y-at < y2
              
              while [precision x-at 0 != precision x2 0]
              [
                ask patch x-at y-at
                [
                  set permeability road_speed
                  set pcolor magenta
                  set food-here default_food_value
                  ;print "coloring in between things"
                ]
                set x-at x-at + dex
                set y-at y-at + dey
              ]
            ]
            
            
          ]
          ;show (not empty? last_point) and (not empty? road_point)
          set last_point road_point
        ]
      ]
    ]
end

to-report map_helper [thing]
  foreach thing
  [
    
    ;show gis:type-of ?
    ;show gis:location-of ?
    report gis:location-of ? ; item 0 thing

  ]
end

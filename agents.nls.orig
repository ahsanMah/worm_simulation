globals [
  ;annual globals
  normal_death_threshold max_death_threshold  ;;probability of death
  normal_reproduction_rate  ;;probablity of reproducing

  ;daily globals
  amount_egested
  consumption-in-period
  periods-in-day
  counter
  organic-regen
  steps-per-ie
  max_stamina
  min_stamina
  agent_size
  burrow
  
  species_list

  temp_number
  temp_genetic_diversity 
  temp_hatch_temperature
  temp_population
  temp_start_x
  temp_start_y
  temp_ph_tolerance
  temp_temperature_tolerance
  
  shape_list
  color_list
  subspecies_count
  
  degree_accumulation_needed
  ph_shift  ;shift in optimum ph due to tolerance
  temp_shift
  ]

breed [cocoons]
breed [adults]

turtles-own [
  death_p     ;probability of death
  reprod_p    ;probability of reproduction
  
  maturation_wait
  wait_period ;days taken by cocoon to hatch given optimal temperature considitions
  wait_days
  hatch_temp  ;minimum temperature required for cocoons to hatch

  subspecies_number
  stamina     ;helps simulate starvation
  time-since-eaten
  food-consumed-last
  iseating?
  cycle-counter
  genetic_diversity
  max_temp_resist
  low_temp_resist
  max_ph_resist
  parent_breed
  death_threshold
  reprod_min_temp
  reprod_max_temp
  cocoon_rate ;cocoon per day
  cocoon
  prev_patch
  patch_days
  ]
cocoons-own[
 degree_days 
 degree_accumulation
]

to setup_agents
  set subspecies_count 0
  set normal_death_threshold 0.00685 / (periods-in-day) ; Simulates a 4 year life span
  set normal_reproduction_rate 0.1
  set max_death_threshold 40
  set agent_size 4
  set steps-per-ie 5
  set max_stamina 5
  set min_stamina 1
  set burrow false
  set counter 0
  set amount_egested 1
  set consumption-in-period 1
  set ph_shift ph_tolerance
  set temp_shift temperature_tolerance
  set species_list table:make
  set shape_list (list "red_worm" "cyan_worm" "pink_worm" "orange_worm" "magenta_worm" "violet_worm")
  set color_list (list red cyan pink orange magenta violet)
  ;foreach species_list [create_species ?]
end

to mouse_add_species
  ifelse (mouse-down?)
    
    [
    add_species mouse-xcor mouse-ycor worm_population species_number
    stop
    ]
    [
    if anyselected?
    [
      let i 0
      while [i < worm_population]
      [
       let rand_x (random-float (x-max - x-min)) + x-min
       let rand_y (random-float (y-max - y-min)) + y-min
       if ([pcolor] of patch rand_x rand_y != blue and [pcolor] of patch rand_x rand_y != grey)
       [
       add_species rand_x rand_y 1 species_number
       set i i + 1
       ]
      ]
      stop
    ]
    
    ]
end



to add_species [x y population species_num]
  let new_species (list species_num species_genetic_diversity ph_tolerance temperature_tolerance population x y)
  
   
  ifelse (table:has-key? species_list species_num) [
    ;create new population with existing settings
    set new_species table:get species_list species_num
    set new_species fput species_num new_species
    set new_species sentence new_species (list population x y)
    
  ] 
  [ table:put species_list species_num (list species_genetic_diversity ph_tolerance temperature_tolerance)]

  ;foreach table:to-list species_list [show ?]
  
  create_species new_species
  
  
end


to create_species [species]
  
  set temp_number item 0 species
  set temp_genetic_diversity item 1 species
  set temp_ph_tolerance item 2 species
  set temp_temperature_tolerance item 3 species
  set temp_population item 4 species
  set temp_start_x item 5 species
  set temp_start_y item 6 species
  
  
  
 create-adults temp_population[
    set parent_breed (temp_number - 1)
    ;move-to one-of patches with [permeability > 0]
    setxy temp_start_x temp_start_y
    set size agent_size

    set shape (item parent_breed shape_list)
    set subspecies_number subspecies_count
    set subspecies_count subspecies_count + 1
    set maturation_wait 0;random-normal 91 22
    set wait_period 15 + random-normal 20 3;simulates a wait period of 15 to 65 days 
    set stamina 5
    set genetic_diversity temp_genetic_diversity ; 0-1 measure of genetic diversity of the species
                                                 ;NOTE --> use genetic diversity to change ph/temp death factors
    set death_threshold normal_death_threshold
    set reprod_min_temp one-of [13 14 15 16]
    set reprod_max_temp reprod_min_temp + 10
    set cocoon_rate 0.093
    set prev_patch ph
    set patch_days 0
   ]
end


to move
  let bool false
  if (pcolor != blue) [
    right (random 121) - 60
    
    ;  if ((count (patch-set (patch-ahead (speed * permeability / periods-in-day))) with [pcolor = blue]) > 
    ;     (count (patch-set (patch-here)) with [pcolor != blue]))
    ;  [
    if (patch-ahead (speed * permeability / periods-in-day) != nobody)[ 
      ask patch-ahead (speed * permeability / periods-in-day) [
        
        if pcolor = blue [
          set bool true
        ]
      ]
    ]
  ]
  
  if (bool = true)[
    if (random 100000 <= 99999)
      [
        right 180
      ]
  ]
  
  if ( count (patch-set (patch-ahead  (speed * permeability / periods-in-day))) with [pcolor = grey]) > 0
  [
    right 180
  ]
  
  forward speed * permeability / periods-in-day
  
  ifelse (ph = prev_patch) 
  [set patch_days patch_days + 1]
  [set patch_days 1]
  
  ;eat
  ;check_death
end


to eat

end


to egest
  set food-consumed-from food-consumed-from - ((1 - amount_egested) * food-consumed-last / steps-per-ie)
  ;;set food-here food-here + ((1 - amount_egested) * food-consumed-last)
  set food-consumed-last food-consumed-last / steps-per-ie
end

to check_death  
  random-seed new-seed
  set death_p random-float 1
    if (death_p < death_threshold) [
      ;show death_threshold
      die
    ]
end

to check_reproduction
  
  if not burrow [
    if (global_temperature > reprod_min_temp and pcolor != blue) [
      if (global_temperature < reprod_max_temp)[
        
        if (maturation_wait < 1) [
          set cocoon cocoon + cocoon_rate
        ]
        
        if (cocoon >= 1)[
          hatch-cocoons 1 [
            set degree_accumulation item (16 - reprod_min_temp) [1300 1200 1100 1000]
            set maturation_wait random-normal 91 22
            set wait_days 0
            set color (item parent_breed color_list)
            set shape "dot"
          ]
          set cocoon 0
        ]
      ]
    ]
  ]
  
end

to check_burrow
<<<<<<< HEAD
  
=======
   
>>>>>>> 9d0cef2adb57476390545477b97e84dc3c5b4f64
  let survival_prob 1
  let day_prob 1
  let mapped_temp 0
  ;gets cumulative probabilities of the past 3 days
  foreach prev_days_temp [
    set mapped_temp precision (? + temp_shift) 1
    
    ifelse table:has-key? temp_table mapped_temp [
      set day_prob (item 0 table:get temp_table mapped_temp)
    ][ set day_prob (item 0 table:get temp_table ?) ]
    
    ;set survival_prob survival_prob * day_prob
    set survival_prob survival_prob * (item 0 table:get temp_table ?)
  ]
  
  ;worm starts burrowing if it senses high death chance in the past few days
  ifelse (survival_prob < 0.7) 
  [set burrow true]
  [ set burrow false]
  
end
;updates probablities of dying and reproducing
to update_thresholds
  ;resetting all parameters
  let survival 0
  let hazard_rate 0
  let mortality_rate 0
  let ph_cocoon_rate 0
  let temp_cocoon_rate 0
  let ph_factor 0
  let temp_factor 0

  ;let ph_factor (3 / 42) * ((e ^ (max_ph_resist - ph) ) - 1) ; function ensures that a ph difference of 3 will have a higher death probability
  ;reproduction rate affected by temperature + pH
  set temp_cocoon_rate 0.54 / 7
  
  ;;pH of soil also affects survival + reproduction rate
  let mapped_ph precision (ph + ph_shift) 1
  let mapped_temp precision (global_temperature + temp_shift) 1
  
  
  ifelse table:has-key? temp_table mapped_temp [
    set temp_factor 1 - (item 0 table:get temp_table mapped_temp)
  ][ set temp_factor 1 - (item 0 table:get temp_table global_temperature) ]
  
  ifelse table:has-key? ph_table mapped_ph [
    set ph_cocoon_rate (item 1 table:get ph_table mapped_ph) / 7
    set survival item 0 (table:get ph_table mapped_ph) ;gets survival chance from pH table
  ]
  [
    set ph_cocoon_rate (item 1 table:get ph_table ph) / 7
    set survival item 0 (table:get ph_table ph)
    ]
 
  set hazard_rate (ln (survival / 100)) / 3
  set mortality_rate 1 - (e ^ (hazard_rate * patch_days))
  set ph_factor mortality_rate
  
  set cocoon_rate min (list temp_cocoon_rate ph_cocoon_rate)
  set death_threshold temp_factor + ph_factor
  ;print word temp_factor ph_factor
  ;show death_threshold
end

to update_maturity
    if (maturation_wait > 0) [
      set maturation_wait maturation_wait - 1
    ]
end

;;hatches temperature is optimum for birth
to check_if_hatch
  if (global_temperature > 0)[
    set degree_days degree_days + global_temperature
  ]
  
  ifelse (degree_days >= degree_accumulation) [
    set breed adults
    set size agent_size
    set stamina 5
    set shape (item parent_breed shape_list)
  ]
  [check_cocoon_death]
end

to check_cocoon_death
  let randNum random-float 1
  let cocoon_death_thresh item 1 table:get temp_table global_temperature
  
  if (randNum > cocoon_death_thresh) [
    die
  ]
  
;  if global_temperature <= 5
;  [
;    if randNum >= 998 [die]
;  ]
;  if global_temperature > 5 and global_temperature <= 10
;  [
;    if randNum >= 998 [die]
;  ]
;  if global_temperature > 10 and global_temperature <= 15
;  [
;    if randNum >= 998 - (998 - 996) / 5 * (global_temperature - 10) [die]
;  ]
;  if global_temperature > 15 and global_temperature <= 20
;  [
;    if randNum >= 996 - (996 - 995) / 5 * (global_temperature - 15) [die]
;  ]
;  if global_temperature >= 20 and global_temperature <= 25
;  [
;    if randNum >= 995 - (995 - 989) / 5 * (global_temperature - 20) [die]
;  ]
;  if global_temperature > 25
;  [
;    if randNum >= 989 - 5 * (global_temperature - 25) [die]
;  ]
end



globals [
  ;annual globals
  normal_death_threshold max_death_threshold death_threshold ;;probability of death
  normal_reproduction_rate reprod_threshold ;;probablity of reproducing

  ;daily globals
  amount_egested
  consumption-in-period
  periods-in-day
  counter
  organic-regen
  steps-per-ie
  max_stamina
  min_stamina
  
  species_list
  population_arr

  temp_number
  temp_genetic_diversity 
  temp_hatch_temperature
  temp_population
  temp_start_x
  temp_start_y
  
  shape_list
  color_list
  
  ]

breed [cocoons]
breed [adults]

turtles-own [
  death_p     ;probability of death
  reprod_p    ;probability of reproduction
  
  maturation
  wait_period ;days taken by cocoon to hatch given optimal temperature considitions
  wait_days
  hatch_temp  ;minimum temperature required for cocoons to hatch

  stamina     ;helps simulate starvation
  time-since-eaten
  food-consumed-last
  iseating?
  cycle-counter
  genetic_diversity
  max_temp_resist
  low_temp_resist
  max_ph_resist
  parent_breed
  ;population
  
  ]

to setup_agents
  
  set normal_death_threshold 0.00685 / (2 * periods-in-day) ; Simulates a 4 year life span
  set normal_reproduction_rate 0.1
  set max_death_threshold 30
  set death_threshold normal_death_threshold
  set reprod_threshold normal_reproduction_rate ; Simulates successful births
  
  set steps-per-ie 5
  set max_stamina 5
  set min_stamina 1

  set counter 0
  set amount_egested 1
  set consumption-in-period 1
  
  set species_list []
  set population_arr array:from-list n-values 5 [0]
  set shape_list (list "red_worm" "cyan_worm" "pink_worm" "orange_worm" "magenta_worm" "violet_worm")
  set color_list (list red cyan pink orange magenta violet)
  ;foreach species_list [create_species ?]
end

to mouse_add_species
  ifelse (mouse-down?)
    
    [
    add_species mouse-xcor mouse-ycor worm_population
    stop
    ]
    [
    if anyselected?
    [
      let i 0
      while [i < worm_population]
      [
       add_species (random (x-max - x-min)) + x-min (random (y-max - y-min)) + y-min 1
       set i i + 1
      ]
      stop
    ]
    
    ]

    
end



to add_species [x y population]
  let new_species (list species_number species_genetic_diversity species_hatch_temperature population x y)
  let updated_species []
  let exists false
  
<<<<<<< HEAD
  if (length species_list > 0)[
  foreach species_list [
    if (item 0 ?) = species_number ;if species already exists
    [ 
=======
  if (length species_list > 0) [
    foreach species_list [
      if (item 0 ?) = species_number ;if species already exists
      [ 
>>>>>>> 6fd0b5abbd48f9356d12a061edb318d011fc5e8d
      set updated_species (replace-item 3 ? (item 3 ? + population)) ;update the population
        set exists true
      ]
    ]
  ]
  ]
  ifelse exists [ set species_list replace-item (species_number - 1) species_list updated_species]
    [ set species_list lput new_species species_list ]
  
  create_species new_species
  
end


to create_species [species]
  
  set temp_number item 0 species
  set temp_genetic_diversity item 1 species
  set temp_hatch_temperature item 2 species
  set temp_population item 3 species
  set temp_start_x item 4 species
  set temp_start_y item 5 species
  
  array:set population_arr (temp_number - 1) (array:item population_arr (temp_number - 1) + temp_population)
  
 create-adults temp_population[
    set parent_breed (temp_number - 1)
    ;move-to one-of patches with [permeability > 0]
    setxy temp_start_x temp_start_y
    set size 1
;    if(temp_number = 1) [set shape "worm"]
;    [set color blue]
    
    set shape (item parent_breed shape_list)

    set maturation 70
    set wait_period 15 + random-normal 20 3;simulates a wait period of 15 to 65 days 
    set hatch_temp temp_hatch_temperature
    set stamina 5
    set food-consumed-last 0
    set iseating? one-of[true false]
    set cycle-counter (random (steps-per-ie + 1))
    ;;set speed 0.3;; / 5
    
    ;set population temp_population
    set genetic_diversity temp_genetic_diversity ; 0-1 measure of genetic diversity of the species
    set max_temp_resist random-normal temperature_tolerance (2 * genetic_diversity)
    set low_temp_resist random-normal 5 (2 * genetic_diversity)
    set max_ph_resist random-normal ph_tolerance (2 * genetic_diversity)
   ]
end


to move
;  ifelse (food-here <= 0)
;  [set stamina stamina - 0.3]
;  [set stamina 5]

  ;let potential-destinations (patch-set patch-here neighbors with [permeability != 0])
  ;ifelse iseating?
  ;[
    ;; uphill [food-here]
    ;;face max-one-of potential-destinations [food-here]
    right (random 181) - 90
    if ((count (patch-set (patch-ahead (speed * permeability))) with [permeability <= speed_in_water]) > 
       (count (patch-set (patch-here)) with [permeability <= speed_in_water]))
    [
      if (random 100000 <= 99999)
      [
      right 180
      ]
    ]
    forward speed * permeability
    eat

;    if cycle-counter >= steps-per-ie
;    [
;      set iseating? false
;      set cycle-counter 0
;    ]
;  ]
;  [
;    ;; downhill [food-here]
;    ;;face max-one-of potential-destinations [food-consumed-from]
;    ;;face min-one-of potential-destinations [food-here]
;    right (random 181) - 90
;    forward speed * permeability
;    egest
;    if cycle-counter >= steps-per-ie
;    [
;      set iseating? true
;      set cycle-counter 0
;    ]
;  ]
  check_death
  ;if not iseating? [check_reproduction]
  ;set cycle-counter cycle-counter + 1
end


to eat

;;  ifelse (food-here < consumption-in-period) ;;prevents consuming more food than on patch
;;  [
;;    set food-consumed-last food-here
;;    set food-here 0
;;  ]
;;  [
;;    set food-consumed-last consumption-in-period
;;    set food-here food-here - consumption-in-period
;;    set time-since-eaten 0
;;  ]
;;
;;  if (food-here > 0) [
;;      if (stamina < max_stamina) [set stamina stamina + food-consumed-last]
;;    ]
;;
;;  set food-consumed-from food-consumed-from + consumption-in-period
  
  
  
  
  
  
  ;;ifelse (stamina < (max_stamina - food-consumed-last)) [ set stamina stamina + food-consumed-last ]
  ;;[if stamina < max_stamina [set stamina max_stamina]]

  ;if (stamina < max_stamina) [set stamina stamina + 1]

  ;;if time-since-eaten > 40
  ;;[die]

end


to egest
  set food-consumed-from food-consumed-from - ((1 - amount_egested) * food-consumed-last / steps-per-ie)
  ;;set food-here food-here + ((1 - amount_egested) * food-consumed-last)
  set food-consumed-last food-consumed-last / steps-per-ie
end

to check_death  
  random-seed new-seed
  set death_p random-float 100
  
  ifelse (stamina < min_stamina) [
    array:set population_arr parent_breed ((array:item population_arr parent_breed) - 1)
    die
    ] ;; dies if out of energy
  [
    if (death_p < death_threshold) [
      array:set population_arr parent_breed ((array:item population_arr parent_breed) - 1)
      die
      ] ;; dies of cold/pH/natural causes
    ] 
  
  end

to check_reproduction
  ;;random-seed new-seed
  set reprod_p random-float 100
  if (reprod_p < reprod_threshold) [
    if (maturation = 70) [
      hatch-cocoons 1 [
        set maturation 0
        set wait_days 0
        set color (item parent_breed color_list)
        set shape "dot"
        ]
      ]
  ]
end

;updates probablities of dying and reproducing
to update_thresholds
  ;cold reduces survival rate
  set death_threshold normal_death_threshold
  if (temperature > max_temp_resist) [ set death_threshold max_death_threshold / (2 * periods-in-day)]
  if (temperature < low_temp_resist) [ set death_threshold max_death_threshold / (2 * periods-in-day)]
  
  ;;pH of soil also affects survival rate
  if (ph < max_ph_resist) [
    set var abs (max_ph_resist - ph)
    set death_threshold (death_threshold + (random 55) / max_ph_resist * var ) ; +55% chance of them dying at pH of 0
  ]
  
  ;reproduction rate affected by temperature
  ifelse (temperature > 10) [
    set reprod_threshold (max_reproduction_rate * (temperature / 15)) ] ; probability of reproducing increases as it gets warmer (10 * 2 * periods-in-day)
  [set reprod_threshold normal_reproduction_rate]
  
end

to update_maturity
    if (maturation < 70) [
      set maturation maturation + 1
    ]
end

;;hatches temperature is optimum for birth
to check_if_hatch
    if (temperature > hatch_temp) [
      set wait_days wait_days + 1
      ;show wait_period
      if (wait_days >= wait_period) [
        ifelse (random 100 < 65)[         ;65% chance of hatching
          set breed adults
          set size 1
          set stamina 5
          set shape (item parent_breed shape_list)
          array:set population_arr parent_breed ((array:item population_arr parent_breed) + 1)
        ]
        [die]
      ]
    ]
end


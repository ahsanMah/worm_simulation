to save_obstacles [name]
  let filename1 (word "simulations/" name "/input/environment/myobstacle.csv")
  csv:to-file filename1 obstacle_list
  print "Saved to file"
end

to load_obstacles [name]
  let filename (word "simulations/" name "/input/environment/myobstacle.csv")
  ;set obstacle_list csv:from-file filename
  print "Loaded obstacles "
  ;;draw_obstacles
end

to save_patches [name]
  save_monitors name
  save_obstacles name
  let filename (word "simulations/" name "/input/environment/mypatches.csv")
  let i min-pxcor
  let j min-pycor
  carefully [file-delete filename] []
  while [(i <= max-pxcor)]
  [
    while [(j <= max-pycor)]
    [
      ask patch i j
      [
        let info (list i j ph food-here permeability local_death_threshold temp_diff_here pcolor soil_depth moisture can-insert?)
        file-open filename
        file-print csv:to-row info
        file-close
        set j j + 1
      ]
    ]
    set j min-pycor
    set i i + 1
  ]

end

to load_patches [name]
  load_obstacles name
  let filename (word "simulations/" name "/input/environment/mypatches.csv")
  let data csv:from-file filename
  foreach (data)
  [
    ask patch (item 0 ?) (item 1 ?)
    [
      set ph item 2 ?
      set food-here item 3 ?
      set permeability item 4 ?
      set local_death_threshold item 5 ?
      set temp_diff_here item 6 ?
      set being_monitored false
      set pcolor item 7 ?
      set soil_depth item 8 ?
      set moisture item 9 ?
      set can-insert? item 10 ?
    ]
  ]
  print "Loaded patches"
  load_monitors name
  calculate_temp
end

to save_agents [name]
  let filename1 (word "simulations/" name "/input/environment/specieslist.csv")
  let data []
  foreach table:to-list species_list [ ;converts table into listto store as csv
    set data lput (sentence item 0 ? item 1 ?) data
  ]
  csv:to-file filename1 data

  let filename (word "simulations/" name "/input/environment/myagents.csv")

  carefully [file-delete filename] []
  ask turtles
  [
    let info (list xcor ycor parent_breed shape wait_period genetic_diversity reprod_min_temp)
    file-open filename
    file-print csv:to-row info
    file-close
  ]
  print "Saved to file"
end

to load_agents [name]
  let filename1 (word "simulations/" name "/input/environment/specieslist.csv")
  let filename (word "simulations/" name "/input/environment/myagents.csv")
  let data []
  set data csv:from-file filename1
  foreach data [table:put species_list item 0 ? (list item 1 ? item 2 ? item 3 ?)]
  
  set data csv:from-file filename
  foreach (data)
  [
    create-adults 1 [
      setxy item 0 ? item 1 ?
      set parent_breed item 2 ?
      set size agent_size
      set shape item 3 ?
      set maturation_wait 0
      set wait_period item 4 ?
      set stamina 5
      set genetic_diversity species_genetic_diversity
      set color (item parent_breed color_list)
      set death_threshold normal_death_threshold
      set reprod_min_temp item 6 ?
      set reprod_max_temp reprod_min_temp + 10
      set cocoon_rate 0.093
      set prev_patch ph
      set patch_days 0
      set age 0
    ]
  ]
  print "Loaded agents"
end

to load_temperature
  let filename (word "simulations/" save_name "/input/environment/temperaturelist.csv")
  file-open filename
  set temperature_table table:make
  let i 0
  while [i < 8]
  [
    let nothing csv:from-row file-read-line
    set i i + 1
  ]
  let days_since_start 0
  let row_entry 0
  while [ not file-at-end? ]
  [
    let row (csv:from-row file-read-line)
    carefully [set row_entry read-from-string (item 1 row)] ; if input is string, convert to number
    [set row_entry (item 1 row)]
    
    if (row_entry = 0) [ ;since NetLogo probably approximates zero
      set row_entry row_entry + 0
      ]
    
    table:put temperature_table days_since_start row_entry
    set days_since_start days_since_start + 1
  ]

  file-close

end

to save_monitors [name]
  let filename (word "simulations/" name "/input/environment/mymonitors.csv")
  let i min-pxcor
  let j min-pycor
  carefully [file-delete filename][] ;deletes the file if it exists otherwise does nothing
  file-open filename
  file-print csv:to-row monitor_names
  file-close
  while [(i <= max-pxcor)]
  [
    while [(j <= max-pycor)]
    [
      ask patch i j
      [
        let info (list i j being_monitored monitor_index monitor_size monitor_number)
        file-open filename
        file-print csv:to-row info
        file-close
        set j j + 1
      ]
    ]
    
    set j min-pycor
    set i i + 1
  ]
end

to load_monitors [name]
  let filename (word "simulations/" name "/input/environment/mymonitors.csv")
  let data csv:from-file filename
  set monitor_names item 0 data
  set data remove-item 0 data
  foreach (data)
  [
    ask patch (item 0 ?) (item 1 ?)
    [
      set being_monitored item 2 ?
      set monitor_index item 3 ?
      set monitor_size item 4 ?
    ]
    set monitor_number item 5 ?
  ]
  let monitor_list n-values monitor_number [?]
  foreach monitor_list [update_monitor_area ?]
  print "Loaded monitors"
end

to load_param [filename table]

  let data csv:from-file filename

  foreach data[
    let param item 0 ?
    let values (but-first ?)
    table:put table param values
  ]
end

to save_patches [name]
  ;save_obstacles name
  let filename (word "simulations/" name "/input/environment/mypatches.csv")
  let i min-pxcor
  let j min-pycor
  carefully [file-delete filename] []
  file-open filename
  
  file-print csv:to-row (lput monitor_number monitor_names)
  
  while [(i <= max-pxcor)]
  [
    while [(j <= max-pycor)]
    [
      ask patch i j
      [
        let info (list i j ph food-here permeability local_death_threshold temp_diff_here pcolor soil_depth moisture can-insert? being_monitored monitor_index );monitor_size)
        file-print csv:to-row info
        set j j + 1
      ]
    ]
    set j min-pycor
    set i i + 1
  ]
  
  file-close

end

to load_patches [name]
  ;load_obstacles name
  let filename (word "simulations/" name "/input/environment/mypatches.csv")
 
  file-open filename
  let info csv:from-row file-read-line
  
  set monitor_names but-last info
  set monitor_number last info

  while [not file-at-end?]
  [
    set info csv:from-row file-read-line
    
    ask patch (item 0 info) (item 1 info)
    [
      set ph item 2 info
      set food-here item 3 info
      set permeability item 4 info
      set local_death_threshold item 5 info
      set temp_diff_here item 6 info
      set temperature global_temperature + temp_diff_here
      set pcolor item 7 info
      set soil_depth item 8 info
      set moisture item 9 info
      set can-insert? item 10 info
      set being_monitored item 11 info
      set monitor_index item 12 info
      ;set monitor_size item 13 info
    ]
  ]
  file-close
  print "Loaded patches"

  let monitor_list n-values monitor_number [?]
  foreach monitor_list [update_monitor_area ?]
  print "Loaded monitors"
end

to save_agents [name]
  let filename (word "simulations/" name "/input/environment/myagents.csv")

  carefully [file-delete filename] []
  file-open filename
  ask turtles
  [
    let info (list xcor ycor (parent_breed + 1) genetic_diversity ph_shift temp_shift reprod_min_temp)
    file-print csv:to-row info
  ]
  file-close
  print "Saved to file"
end

to load_agents [name]
  let filename (word "simulations/" name "/input/environment/myagents.csv")
  let data []

  set data csv:from-file filename
  foreach (data)
  [
    add_species (item 0 ?) (item 1 ?) 1 (item 2 ?) (item 3 ?) (item 4 ?) (item 5 ?) (item 6 ?)
  ]
  print "Loaded agents"
end

to load_temperature
  let filename (word "simulations/" save_name "/input/environment/temperaturelist.csv")
  file-open filename
  set temperature_table table:make
  let i 0
  while [i < 8]
  [
    let nothing csv:from-row file-read-line
    set i i + 1
  ]
  let days_since_start 0
  let row_entry 0
  while [ not file-at-end? ]
  [
    let row (csv:from-row file-read-line)
    carefully [set row_entry read-from-string (item 1 row)] ; if input is string, convert to number
    [set row_entry (item 1 row)]
    
    if (row_entry = 0) [ ;since NetLogo probably approximates zero
      set row_entry row_entry + 0
      ]
    
    table:put temperature_table days_since_start row_entry
    set days_since_start days_since_start + 1
  ]

  file-close

end

to load_temp_dependancy [filename table]

  let data but-first csv:from-file filename
  
  foreach data[
    let param item 0 ?
    let values (but-first ?)
    table:put table param values
  ]
end

to load_ph_dependancy [filename table]
  
  let data csv:from-file filename
  let experiment_info first data
  set experiment_days item 1 experiment_info ;gets the number of days from the first row
  set data but-first but-first data ;skips the two header rows
  
  foreach data[
    let param item 0 ?
    let values (but-first ?)
    table:put table param values
  ]
end

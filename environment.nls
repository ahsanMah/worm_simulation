
globals [
  ;;annual globals
  day_num ;;day number
  year
  global_temperature
  ;temperature ;temperature in a given day
  var ;multi-use temporary variable

  current_month
  next_month
  num_days
  temperatures
  day_of_month
 


  obstacle
  obstacle_list
  temp_arr
  speed_in_water

  temp_shape
  temp_size
  temp_x
  temp_y
  temp_pH
  temp_movable

  ]


patches-own
[
  ph        ;pH values ranging from 0-14
  food-here ;amount of food on this patch
  permeability ;; 0 - 1, 0 being completely impermeable, 1 meaning complete freedom of movement
  local_death_threshold
  food-consumed-from
  temperature_difference
  temperature
  being_monitored
  monitor_size
]

to setup_environment
  
  set day_num starting_day
  set year 0
  set periods-in-day 4;;0
  set speed_in_water 0.05

  set temperatures (list January February March April May June July August September October November December)
  set num_days (list 31 28 31 30 31 30 31 31 30 31 30 31)
  set current_month 0
  set var starting_day
  while [var > 0]
  [
    if var > item current_month num_days
    [
     set current_month current_month + 1

    ]
    set var var - item current_month num_days
  ]
  set global_temperature random-normal (item current_month temperatures) (1)
  calculate_temp
  
  set day_of_month (var + (item ((current_month - 1) mod 12) num_days))
  ;;set next_month current_month + 1 mod 12
  
  set organic-regen 0.3 ;;0.004;; / 5
 
 ;array used to temporarily store obstacle parameters
  set obstacle n-values 6 [0]

  ;print obstacle
  set obstacle_list []
  
  ask patches
  [
    set permeability 1
    set ph 7
    ;set local_death_threshold death_threshold
    set temperature_variation 0
    set being_monitored false
    
    setup-initial-food
    recolor-patch
    ;foreach obstacle_list [setup-obstacles ? ]
  ]
  
end


to calculate_temp
  ask patches
  [
    set temperature global_temperature + temperature_difference
  ]
;    set temperature (4 * var * (180 - var)) / (40500 - var * (180 - var))
;    set temperature temperature * max_temperature ;scales temperature to real world values

end

to add_obstacle
  
  set obstacle (list obstacle_shape obstacle_size obstacle_x obstacle_y 0 false) 
  set obstacle_list lput obstacle obstacle_list
  show obstacle_list
  
  ask patches 
  [
    setup-obstacles obstacle
  ]
  calculate_temp
  recolor_patches
  ;draw_obstacles

end

to recolor_patches
  ask patches
  [
   recolor-patch 
  ]
end

to draw_obstacles
    ask patches [
    foreach obstacle_list [setup-obstacles ? ]
    ]
    recolor_patches

end


to calculate_time
  ;; two ticks to simulate one gestation cycle
  ;; worm completes 10 cycles in one day
  if (ticks mod (2 * periods-in-day) = 0) [
    set day_num day_num + 1
    set day_of_month day_of_month + 1
  ]
    if day_of_month > item current_month num_days
    [
      set current_month (current_month + 1) mod 12
      set day_of_month 1
      show current_month
  ]
  
  if (day_num = 366) [
    set year year + 1
    set day_num 1 ;;reset for every year
  ]
  

  end

to setup-initial-food
;  let setup-patch one-of patches
;  if (distancexy 0 60) < 30
;  [
;    set food-here 400
;  ]
;
;  let setup-patch2 one-of patches
;  if (distancexy 0 -60) < 30
;  [
;    set food-here 400
;  ]

;set food-here (random 251 + 250)
  set food-here 5000
end

to recolor-patch
  ifelse (permeability  > speed_in_water)
  [
    if (Show: = "pH")
    [
      if (ph = 7)
      [
       set pcolor white 
      ]
      if (ph > 7)
      [
       set pcolor scale-color violet ph 16 7 
      ]
      if (ph < 7)
      [
       set pcolor scale-color yellow ph -2 7
      ]
    ]
    if (Show: = "food")
    [
      set pcolor scale-color green food-here 6000 0
    ]
    if (Show: = "temperature")
    [
      if (temperature_difference = 0)
      [
        set pcolor white
      ]
      if (temperature_difference > 0)
      [
        set pcolor scale-color red temperature_difference 10 0 
      ]
      if (temperature_difference < 0)
      [
        set pcolor scale-color violet temperature_difference -10 0
      ]
    ]

    if (Show: = "monitor") [
      if (being_monitored) [set pcolor orange]
    ]
  ]
  [
    set pcolor blue
  ]
end

to add_patch
  let var_x ((max-pxcor + 1) / num_patches_horizontal * (patch_x - 1))
  let var_y ((max-pycor + 1) / num_patches_vertical * (patch_y - 1))
  let i var_x
  let j var_y
  while [i < var_x + max-pxcor / num_patches_horizontal]
  [
   while [j < var_y + max-pycor / num_patches_vertical]
   [
    ask (patch i j)
    [
      if change-pH?
      [
        set pH patch_pH
        set temperature_difference temperature_variation
      ]
      recolor-patch
    ] 
    set j j + 1
   ] 
   set i i + 1
   set j var_y
  ]
  
end


to setup-obstacles [one_obstacle]
  ;if obstacle parameters given

  if (item 0 one_obstacle != 0) [
    ;looks at items in the array to setup the obstacle

    set temp_shape item 0 one_obstacle
    set temp_size item 1 one_obstacle
    set temp_x item 2 one_obstacle
    set temp_y item 3 one_obstacle
    set temp_pH item 4 one_obstacle
    set temp_movable item 5 one_obstacle


    if temp_shape = "mountain"
    [
      if (distancexy temp_x temp_y) < temp_size 
      [
          set permeability 1
          set ph (ph - ((ph - min_ph) / temp_size) * (temp_size - distancexy temp_x temp_y) )
          set temperature_difference (temperature_difference + ((max_temp_difference) / temp_size) * (temp_size - distancexy temp_x temp_y))
          ;; set temperature later 
      ]
    ]
    
    if temp_shape = "lake"
    [
      if (distancexy temp_x temp_y) < temp_size 
      [
        set permeability speed_in_water
        set food-here 0
        set ph 7
        ask turtles-here [die]
        
      ]
    ]
    
    
    if temp_shape = "square"
    [
      if pxcor >= temp_x - temp_size and pxcor <= temp_x + temp_size and pycor >= temp_y - temp_size and pycor <= temp_y + temp_size
      [
        ifelse temp_movable [
         set permeability speed_in_water
         ]
        [ set food-here 0
          set permeability 0
          ask turtles-here [die]
          ]
        ;;set ph random-normal temp_pH 1

      ]
    ]

    if temp_shape = "horizontal-line"
    [
      if distancexy temp_x temp_y <= temp_size and temp_y = pycor
      [
        ifelse temp_movable [
          set permeability speed_in_water
        ]
        [ set food-here 0
          set permeability 0
          ask turtles-here [die]
        ]
        ;;set ph random-normal temp_pH 1
      ]
    ]
    
    if temp_shape = "vertical-line"
    [
      if distancexy temp_x temp_y <= temp_size and temp_x = pxcor
      [
        ifelse temp_movable [
          set permeability speed_in_water
        ]
        [ set food-here 0
          set permeability 0
          ask turtles-here [die]
        ]
        ;;set ph random-normal temp_pH 1 
      ]
    ]
    
    if temp_shape = "monitor"
    [
      if (distancexy temp_x temp_y) < temp_size 
        [
          set being_monitored true
          set monitor_size temp_size
        ]
    ]

  ]
end

to collect_data  
    if (being_monitored)
    [ ;show count turtles-here with [parent_breed = monitored_breed]
      
      foreach species_list [
        set current_species item 0 ?                                  ;species' breed
        set current_species_info (table:get species_data current_species)  ;retreives info about specific breed
        
        set patch_population (count turtles-here with [parent_breed = (current_species - 1)])
        ;show patch_population
        array:set current_species_info 0 ((array:item current_species_info 0) + patch_population) ;updates (increments) species populations
        array:set current_species_info 1 ((array:item current_species_info 0) / monitor_size)
        
        ;table:put species_data current_species current_species_info
        ]
    ]
  
end


to update_organic_matter
end